Por que React?

	Documentação oficial do React
	Link: https://pt-br.reactjs.org/docs/getting-started.html

	React é uma biblioteca de renderização de componentes

	Usando o React CodePen
		Link: https://codepen.io/
		Site de compartilhamento de pequenos códigos estáticos

		Em configuração usar o babel para fazer o superset de js
		   Ir no pen settings e configurar o 
		   		- preprocessor para o babel em Js
		   		- adicionar as add external scpriptts pen do react
		   			- importar o react e o react dom


		Criando um componente em react

			Em Js //Utilizando as 2 bibliotecas

				const App = React.createElement('div', null, 'Olá Mundo');
				ReactDOM.render(App,document.querySelector('#app'));

			No html a renderização
				
				<div id="app">
  
  				</div>


  			Aninhando componentes

  			No js
  			const Hello =  React.createElement('div', null, 'Olá, Mundo !!!');
			const App = React.createElement('div', null, Hello);

			no html
			ReactDOM.render(App,document.querySelector('#app'))

		O JSX é uma forma amígável de leitura 


		Node do curso 12.18.2
		Para mudar a versão do node use 
		node -use 12.18.2


	1.5. Iniciando a nossa SPA com React CLI

		Single Page Application(Aplicação de Página Única)
		Uma única página contém toda a aplicação
		Geralmente é um arquivo html estatíco
		Se comunica com o backend por meio de uma API

		Vantagens
			- Melhora a experiência do Usuário
			- Aumento de performance
			- Manutenabilidade
			- Redução de custos

		Quem usa SPAs?
			- Netflix
			- Gmail
			- YouTube
			- Google Drive
			- PayPall

		Onde usar?
			- Em aplicações muito dinâmicas
			- Em aplicações que lidam com grande volume e tipos de dados
			- Aplicações que manipulam muito o DOM

		Onde não faz sentido usar?
			- Sites institucionais por serem muito estáticos


		Criando o projeto com React Cli
			- Gera toda estrutura que precisamos para nossa SPA
			- Salva muito o tempo
			- Abstrai boa parte da lógica
			- Personalizável com template
			- Não precisa instalar


		Criando um projeto com React-CLI	
			Documentação React Cli
			Link: https://create-react-app.dev/docs/getting-started/
			
			npx create-react-app nome-do-app --template nome-do-template
			npx create-react-app alga-stock --template typescript


		Fluxo de chamada da SPa do React
			index.tsx = aqui ele informa o root que vai ser renderizado através do index.html

		Link do Projeto final do Curso:  https://github.com/algaworks/algastock


		Tipos de componentes

		Os componentes baseados em classe
			Ainda se utilizar apesar de ser descontinuado no futuro


		Componentes funcionais

		Cria um componente e faz a chamada através de um parâmetro
		O método props seria o arguments do js
		Ex.
		
		Arquivo app.tsx
			<ClassComponent name="Meu País Brasil" />
		
		Criando um componente baseado em classe

		import React from 'react';

		class ClassComponent extends React.Component<{name: string}> {

			state = {
				name: 'Mundo'
			}
			
			render(){
				return <div>Olá, {this.state.name} {this.props.name}. Eu sou um componente baseado em classe</div>
			}

		}

		export default ClassComponent
		
		Como criar um componente que altera o estado
		Ex.

		import React from 'react';

		class ClassComponent extends React.Component<{name: string}> {

			state = {
				name: 'Mundo'
			}
			
			render(){
				return <div>
					<p>name: {this.state.name}</p>
					<button onClick={()=>{
						this.setState({name: 'Roberto'})    
					}}>Click me</button>
				</div>
			}

		}

		export default ClassComponent

	************************************************************************************************************************************
	2.3. Ciclos de vida dos componentes

		1. Ao Montar o componente

		Ao criar uma classe
			Chama o construtor
			em seguida chama o método render
			O react faz automaticamente atualização nas referências do DOM
			componentDidMount => Acessa-se as modificações utilizando o componentDidMount

		2. Ao atualizar o componente
			chama o método render
			O react faz automaticamente atualização nas referências do DOM
			componentDidUpdate => Acessa-se as modificações utilizando o componentDidUpdate
		
		3. Ao excluir o componente
			chama o método componentWillMount antes de excluir o componente

	************************************************************************************************************************************
	2.4. Componentes funcionais (com hooks)

		Um componente funcional é uma função que retorna o objeto

		Diferença entre Componentes funcionais e componentes baseados em classe
	
		1 Forma como se lida com propriedades
			Em componentes funcionais são acessíveis ao receber no primeiro parâmetro

			Criando o componente
			import React from 'react';
			import './TestComponent.css';

			function TestComponent(props: { name : string}) {
			return <div className="TestComponent">
				Olá, { props.name }    
			</div>
			}

			export default TestComponent;

			No arquivo app.tsx
			<TestComponent name="Roberto"  />
		
		2 Forma como se lida com estado em um componente funcional

			Em resumo tem que fazer um Hook para que a alteração do estado dentro de uma proprieadade de um componente funcional execute com sucesso

			Ex.
			import React, { useState } from 'react';
			import './TestComponent.css';

			function TestComponent(props: { name : string}) {
				
				const [age,setAge] = useState(21);

				return <div className="TestComponent">
					Olá, { props.name } , {age}  
					<button onClick={()=>{
						setAge(age + 1)
						console.log(age);
					}}>
					+
					</button>

				</div>
			}

			export default TestComponent;

	************************************************************************************************************************************
	2.5. Entendendo o hook useEffect

		O useEffect é executado após a criação do componente

		Ex:
		import React, { useState, useEffect } from 'react';
		import './TestComponent.css';

		function TestComponent(props: { name : string}) {
			
			const [age,setAge] = useState(21);

			useEffect(() =>{
				console.log('Componente foi Criado ');

			}, []);

			useEffect(() =>{
				console.log('Age foi atualizado para'+ age);

			}, [age]);

			console.log('Segundo Log');


			return <div className="TestComponent">
				Olá, { props.name } , {age}  
				<button onClick={()=>{
					setAge(age + 1)
					console.log(age);
				}}>
				+
				</button>

			</div>
		}

		export default TestComponent;

		O useEffect foi realizado sem dependência e com Dependência, passando o Age.
		A diferença do componentDidUpdate com relação ao useEffect é que 
			O useEffect vai ser executado na primeira vez que montar o componente e em todas as outras vezes que o valor do meu estado for alterado

	************************************************************************************************************************************
	2.6. Dando cara à nossa aplicação (estilizando com CSS)
		Continuar daqui a partir de 1minuto
		Link de estilização de reset do css: https://pt-br.reactjs.org/docs/faq-styling.html#gatsby-focus-wrapper

		Pesquisar no google fonts a font lato e realizar o import para o prjeto, assim o sistema vai fazer a requisição.

	************************************************************************************************************************************
	2.7. Entendendo tudo sobre Props

	Documentação oficial sobre props: 
	Link: https://pt-br.reactjs.org/docs/components-and-props.html

	Props é uma maneira de passar dados do pai para o filho

	************************************************************************************************************************************
	2.8. Shared components e arquitetura

	Segregando componentes que vão ser compartilhados com componentes que não

	************************************************************************************************************************************
	2.9. Criando o componente Input

		Refez o processo, porém utilizou um bind para um Input
		o valor React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>{
		foi capturado mediante a visualização de quem é estendido pelo input, apenas refleti a mesma extensão

		import React from 'react';
		import './Input.css'

		declare interface InputProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>{
			label:string
		}

		const Input: React.FC<InputProps>= (props) =>{
			return <div className="AppInput">
				<label>
					<span>{ props.label }</span>
					
					<input 
						{...props} 
					/>

				</label>
			</div>
		}

		export default Input

	************************************************************************************************************************************
	2.10. Renderização de listas em detalhes
Continuar 2.10
